# <<<<<<< HEAD
# # fruit_list=["apple","mango"]
# # fruit_list
# # a=fruit_list
# =======
# fruit_list=["apple","mango"]
# fruit_list
# a=fruit_list
# >>>>>>> 1ef12916a0b28aaee42a04162615a48d9aa37474
# # print(a)


# # some_iterable = ["a", "b", "c"]
# # first_letter = some_iterable[0]
# # middle_one = some_iterable[1]
# # last_letter = some_iterable[2]
# # print(some_iterable)


# numbers = ['a', 'b']
# print(numbers)
# numbers.append('c')
# print(numbers)  # ['a', 'b', 'c']
# char=["d","h"]
# # numbers.extend(char)
# # print(numbers)
# # numbers.insert(1,"z")
# # print(numbers)
# # numbers.remove("c")
# # print(numbers)
# numbers.extend(char*2)
# print(numbers)
# # h_ind=numbers.index("h")
# # print(h_ind)
# # ch=input("Input character >>>")
# # count=numbers.count(ch)
# # print(ch,"have index",count)
# # try:
# #     index_ch=numbers.index(ch)
# # except ValueError:
# #     print(ch, " - is not in list")
# # else:
# #     print(index_ch)
# # numbers.sort()
# # print(numbers)
# # print("list numbers have ", len(numbers), "arguments")
# # numbers.append("f")
# # print(numbers)
# # numbers.sort()
# # print("sort2 - ",numbers)
# # numbers.reverse()
# # print("revers - ",numbers)
# <<<<<<< HEAD
# # numbers.extend("v")
# # print(numbers)
# # test_char=[]
# # for i in numbers:
# #     print(i)
# #     test_char.append(i*2)
# #     test.len(test_char)
# #     print(test_char, test)

# s = "Hello"
# s.upper()
# print(s)    # Виведе 'HELLO'



# s = "Hello world!"
# s.upper()
# print(s[0])   # H
# print(s[-2])  # !
# print(f"{s[0]+ s[3]:<10} | {s[-5]:<10} |")


# passw = input("Input your new password: ")
# if "qwerty" in passw or "123" in passw:
#     print("This password is too weak!")
# else:
#     print("Your password is correct")

# # passw=int(passw)
# prime_numbers = {111, 3, 5, 7, 11, 13, 17, 19, 23}
# is_prime = passw in prime_numbers
# print(is_prime)
# for a in prime_numbers:
#     print(a)
# d=len(passw)
# b=0
# while b<d:
#     c=passw[b]
#     print(c)
#     b=b+1

# from pathlib import Path

# p = Path('/home/user/Downloads')    # p Вказує на папку /home/user/Downloads
# for i in p.iterdir():
#     print(i.name)   # Виведе у циклі імена всіх папок та файлів у /home/user/Downloads
# 






# *********************<<<<<<< Homework 1 >>>>>>>>>>****************
# =======
# numbers.extend("v")
# print(numbers)
# test_char=[]
# for i in numbers:
#     print(i)
#     test_char.append(i*2)
#     test.len(test_char)
#     print(test_char, test)
# >>>>>>> 1ef12916a0b28aaee42a04162615a48d9aa37474




# *********************<<<<<<< Homework 1 >>>>>>>>>>****************

# def amount_payment(payment):
#     sum = 0
#     for element in payment:
#         if element > 0:
#             sum += element
#     return sum
# # print(sum)
# # print(sum)
# print(amount_payment([12,-3,12,10,10,-56,5]))



# *********************<<<<<<< Homework 2 >>>>>>>>>>****************
# data=[1, -3, 4, 100, 0, -5, 10, 1, 1]

# def prepare_data(data):
#     a=max(data)
#     b=min(data)
#     data.remove(a)
#     data.remove(b)
#     data.sort()
#     print(data)
#     return data

# prepare_data([1, -3, 4, 100, 0, -5, 10, 1, 1])
# print(data)
# # data.sort()
# print(data)
# data.pop(0)
# print(data)
# a=len(data)
# print("a=", a)
# b=max(data)
# print("b=", b)
# data.remove(b)
# print(data)



# *********************<<<<<<< Homework 3 >>>>>>>>>>****************
# def get_grade(key):
#     for a in my_dict_one:
#         if a==key:
#             print(my_dict_one[a])
#             return my_dict_one[a]

# def get_description(key):
#     for b in dict_zalik:
#         if b==key:
#             print(dict_zalik[b])
#             return dict_zalik[b]

# my_dict_one = {
#     "F":1,
#     "FX":2,
#     "E":3,
#     "D":3,
#     "C":4,
#     "B":5,
#     "A":5
#     }
# dict_zalik= {
#     "F": "Unsatisfactorily",
#     "FX": "Unsatisfactorily",
#     "E": "Enough",
#     "D": "Satisfactorily",
#     "C": "Good",
#     "B": "Very good",
#     "A": "Perfectly"
#     }

# print(my_dict_one)
# key="C"
# get_grade(key)
# get_description(key)



# for a in my_dict_one:
#     if a == key:
#         print(my_dict_one[a])

# get_grade(3)
# print(my_dict_one.keys[0])



# lang = {"Python": 1991, "Java": 1995, "JS": 1995, 7: 8}
# lang.update({5:6})
# print(lang)


# *********************<<<<<<< Homework 5 >>>>>>>>>>****************
# def split_list(grade):
#     try:
#          avg = sum(grade) / len(grade)
#     except TypeError:
#         print("avg=0")
#         list1 = [] #low grade
#         list2 = [] #high grade
#     except ZeroDivisionError:
#         print("avg=0")
#         list1 = [] #low grade
#         list2 = [] #high grade
#     else:
#         print("avg",avg)
#         list1 = [] #low grade
#         list2 = [] #high grade
    
#         for a in grade:
#                 if a <= avg:
#                     list1.append(a)
#                 else:
#                     list2.append(a)

#     grade_tuple = (list1, list2)
#     return grade_tuple
# # grade=1,23,4,56,7,89,10
# grade=0
# print(split_list(grade))
# grade=1,2,8,9
# print(split_list(grade))




# *********************<<<<<<< Homework 6 >>>>>>>>>>****************
# user_1 = {"name": "Jane", "age": 21}
# user_2 = {"name": "Moris", "age": 23}
# user_3 = {"name": "Steve", "age": 24}

# persons = [user_1, user_2, user_3]

# for user in persons:
#     for field in user:
#         print(user.get(field))
#         print(user.keys())


# def game(terra, power):
#     ''' gkxlkgjvsd asgdja'''
#     for sub_list in terra:
#         for element in sub_list:
#             if element <= power:
#                 power += element
#             else:
#                 break
#     print("power is", power)
#     return power


# terra=([1, 1, 5, 10])
# power=1
# game(terra, power)




# *********************<<<<<<< Homework 7 >>>>>>>>>>****************
# -------> theory
# string_set = set("set")
# print(string_set)  # {'s', ' ', 'y', 'M', 't', 'e'}
# list_set = set(["My", "set", "one", "two", "tree"])  # {'My', 'set'}
# print(list_set)
# new_set = {1, 2, 3, "My", "set", "H", "i"}
# print(new_set)  # {1, 2, 3, 'My', 'i', 'set', 'H'}
# new_set.add("wow")
# a=len(new_set)
# print(">>>length a=", a)
# print(new_set)
# new_set.discard("wo")
# b=len(new_set)
# print(">>>length new_set nnow b =",b)
# print(new_set)

# first = {1, 2, 3, "My", "set", "one", "two", "tree"}
# second = {3, 4, 5}
# print("")
# print("Пошук спільних елементів двох множин")
# print("string_set&new_set --> ",string_set&new_set)
# print("first & second -->", first & second)  # {3}
# print("first & new_set --> ", first & new_set)
# print("first & list_set -->", first & list_set)
# print("")

# print("Пошук всіх елементів з двох множин, крім спільних")
# print("string_set ^ new_set --> ",string_set ^ new_set)
# print("first ^ second -->", first ^ second)  # {3}
# print("first ^ new_set --> ", first ^ new_set)
# print("first ^ list_set -->", first ^ list_set)
# print("")

# print("Об'єднання двох множин")
# print("string_set | new_set --> ",string_set | new_set)
# print("first | second -->", first | second)  # {3}
# print("first | new_set --> ", first | new_set)
# print("first | list_set -->", first | list_set)


# pin_true=['1101', '9034', '0011']
# pin=input("Input pin code: ")

# def is_valid_pin_codes(pin_codes):
#     pin_true=['1101', '9034', '0011']
#     for p in pin_true:
#         p=int(p)
#         print(p)
#         if pin_codes==p:
#             print(p, pin_codes)
#             result=True
#             break
#         else:
#             result=False
#     print("result is - ", result)
#     return result

# print(is_valid_pin_codes(pin))

# pin_codes = ['1222', '1234', '1001','1', '1111', '1234']


# lst=pin_codes
# def has_duplicates(lst):
#     for i in range(len(lst)):
#         for j in range(i + 1, len(lst)):
#             if lst[i] == lst[j]:
#                 return False
#     return True

# print(has_duplicates(lst))



# -----> Homework
# def is_valid_pin_codes(pin_codes):

#     lst=pin_codes
#     def has_duplicates(lst):
#         for i in range(len(lst)):
#             for j in range(i + 1, len(lst)):
#                 if lst[i] == lst[j]:
#                     return False
#         return True

#     print("has_duplicates(lst) -->", has_duplicates(lst))

# #     if has_duplicates(lst):
#         result = False
#         a=len(pin_codes)
#         print("a=", a)
#         for item in pin_codes:
#             b=len(item)
#             print ("b= ",b)
#             if item.isdigit() and b==4:
#                 result = True
#                 print("if",result)
#             else: 
#                 result = False
#                 print("else", result)
#                 break
#         return result
#     else: 
#         print("List have two or more dublicate pin_code")
#         return False
         
# print(is_valid_pin_codes(['1101', '9034', '0011']))



# *********************<<<<<<< Homework 8 >>>>>>>>>>****************
# -------> theory
# -----> Homework
# def is_valid_password(password):
#     def big_char(password):
#         return any(char.isupper() for char in password)
#     def lower_char(password):
#         return any(char.islower() for char in password)
#     def int_char(password):
#         return any(char.isdigit() for char in password)


#     if big_char(password) and lower_char(password) and len(password)>=8 and int_char(password):
#         print("Password містить велику літеру і малу літеру і більше 8 символів та має цифри.")
#         return True
#     else:
#         print("Пароль не надійний")
#         return False
    
# is_valid_password("ясчичGj*дFG")


# *********************<<<<<<< Homework 9 >>>>>>>>>>****************
# -------> theory
# -----> Homework

# from pathlib import Path

# def parse_folder(path):
#     # Ініціалізуємо два порожніх списки для файлів і директорій
#     files = []
#     directories = []

#     # Перевіряємо, чи існує вказаний шлях і чи є він директорією
#     if path.exists() and path.is_dir():
#         # Ітеруємось по кожному об'єкту в директорії
#         for item in path.iterdir():
#             # Перевіряємо, чи є елемент файлом чи директорією
#             if item.is_file():
#                 files.append(item.name)  # Додаємо ім'я файлу до списку файлів
#             elif item.is_dir():
#                 directories.append(item.name)  # Додаємо ім'я директорії до списку директорій
#     else:
#         print("Шлях не існує або не є директорією.")

#     return (files, directories)

# # Приклад використання
# folder_path = Path("/шлях/до/директорії")
# files_list, dirs_list = parse_folder(folder_path)
# print("Список файлів:", files_list)
# print("Список директорій:", dirs_list)





# *********************<<<<<<< Homework 10 >>>>>>>>>>****************
# # -------> theory
# # -----> Homework
# import sys

# def parse_args():
#     # Повертаємо аргументи командного рядка, що йдуть після першого (перший - назва скрипта)
#     return ' '.join(sys.argv[1:])

# # Приклад використання
# args_string = parse_args()
# print(args_string)




# *********************<<<<<<< Homework 8 >>>>>>>>>>****************
# -------> theory
# -----> Homework