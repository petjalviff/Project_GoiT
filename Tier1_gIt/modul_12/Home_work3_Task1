import re
from datetime import datetime



class Field:
    def __init__(self, value):
        self.value = value    
    
    def __str__(self):
        return str(self.value)
    

class Name(Field):
    pass

class Birthday(Field):
    def __init__(self, value: str) -> None:
        if self.__is_valid_date(value):
            super().__init__(value)
        else:
            raise ValueError("Date must be in format dd.mm.yyyy")

    def __is_valid_date(self, value) -> bool:
        pattern = r'^\d{2}\.\d{2}\.\d{4}$'
        if re.match(pattern, value):
            return True
        return False

class Phone(Field):
    def __init__(self, value):
        if not value.isdigit() or len(value) < 10 or len(value) > 13:
            raise ValueError("Phone number must be a 10-digit number.")
        super().__init__(value)
        
class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.birthday: Birthday = None    
        
    def add_phone(self, phone):
        self.phones.append(Phone(phone))    
        
    def delete_phone(self, phone):
        temp_list=[]
        for i in self.phones:
            if i.value != phone:
                temp_list.append(i.value)
        self.phones=temp_list
        print("phone -",phone,"is deleted in contact -", self.name)
    
    def change_phone(self, phone_old, phone_new):
        self.delete_phone(phone_old)
        self.add_phone(phone_new)
        print("phone changed in contact -", self.name)    
    
    def find_phone(self, phone):
        for i in self.phones:
            if i.value == phone:
                return i
        return None    

    def add_birthday(self, birthday_n):
        self.birthday=(Birthday(birthday_n))


    def __str__(self):
        phone_s='; '.join(str(p) for p in self.phones)
        birthday_s=f", Birthday: {self.birthday}" if self.birthday else ""
        return f"Contact name: {self.name.value}, phones: {phone_s}{birthday_s}"



class AddressBook:
    def __init__(self):
        self.data = {}    
    
    def add_record(self, record):
        self.data[record.name.value] = record    

    def delete(self, name):
        if name in self.data:
            del self.data[name]    
    
    def find(self, name):
        return self.data.get(name)    
    
    def __str__(self):
        return '\n'.join(str(record) for record in self.data.values())

    def get_birthdays_per_week(self):
        
        today=datetime.today()
        
        today=today.date()
        print("Today is ",today)
        
        # Створюємо список словників на тиждень в якому будуть відображатись всі іменинники
        dict_week={ 
                "Monday":[],
                "Tuesday":[],
                "Wednesday":[],
                "Thursday":[],
                "Friday":[],
                }
        for user in self.data.values():
            name=user["name"]
            birthday=user["birthday"].date()
            birthday_this_year=birthday.replace(year=today.year)
            print("")
            print(name)
            # print(birthday)
            # print(birthday_this_year)
            if birthday_this_year<today:
                birthday_this_year=birthday.replace(year=today.year+1)
            print(birthday_this_year)

            day_today=today.weekday()
            print("day_today -",day_today)
            delta_days=((birthday_this_year-today).days)
            print("delta_days -", delta_days)

            if delta_days<7:
                day_week=delta_days+day_today
                print("day_week 1-", day_week)
                if day_week>6:
                    day_week=delta_days+day_today-7
                    print("day_week 2-", day_week)

                if day_week==0:
                    dict_week["Monday"].append(name)
                elif day_week==1:
                    dict_week["Tuesday"].append(name)
                elif day_week==2:
                    dict_week["Wednesday"].append(name)
                elif day_week==3:
                    dict_week["Thursday"].append(name)
                elif day_week==4:
                    dict_week["Friday"].append(name)
                elif day_week==5:
                    dict_week["Monday"].append(name)
                elif day_week==6:
                    dict_week["Monday"].append(name)


            for day_dict, people in dict_week.items():
                print(f"{day_dict}: {people}")
        return dict_week 




def parse_input(user_input):
    cmd, *args = user_input.split()
    cmd = cmd.strip().lower()
    return cmd, *args

def input_error(func): #декоратор для перевірки помилок в командах
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValueError:
            return "Give me name and phone please."
        except KeyError:
            return "Enter actual key"
        except IndexError:
            return "Do not have user on this position"


    return inner

@input_error
def add_contact(args, contacts):
    name, phone = args
    # contacts[name] = phone
    record=Record(name)
    record.add_phone(phone)
    contacts.add_record(record)
    return "Contact added."

@input_error
def change_username_phone(args, contacts):
    name, phone_new = args
    # contacts[name] = phone
    record = contacts.find(name)
    if record:
        # old_phone=record.find_phone(phone_old)
        # if old_phone:
        #     record.delete_phone(old_phone)
        record.add_phone(phone_new)
    return "Contact changed."

def add_birthday(args, contacts):
    name, birthday=args
    record=contacts.find(name)
    if record:
        record.add_birthday(birthday)
        return "birthday added for name"
    else: return "Contact not found"

def show_birthday(args, contacts):
    name=args[0]
    record=contacts.find(name)
    if record and record.birthday:
        return f"{name} have birthday on {record.birthday}"
    elif record:
        return f"{name} does not have a birthday set"
    else: return f"Contact {name} not found"

def main():
    contacts = {}
    book = AddressBook()

    print("Welcome to the assistant bot!")
    while True:
        user_input = input("Enter a command: ")
        command, *args = parse_input(user_input)

        if command in ["close", "exit"]:
            print("Good bye!")
            break
        elif command == "hello":
            print("How can I help you?")
        elif command == "add":
            print(add_contact(args, book))
        elif command == "change":
            print(change_username_phone(args, book))
        elif command == "all": #потрібно ще попрацювати над цим в залежності, що буде відображати
            print(book)
        elif command == "phone":
            for name in args:
                print(name, ":", contacts.get(name))
        elif command == "add-birthday":
            print(add_birthday(args,book))
        elif command=="show-birthday":
            print (show_birthday(args, book))
        elif command=="birthdays":
            pass
        elif command == "commands":
            print("all commands: hello, add, change, all, phone, commands")
        else:
            print("Invalid command.")

if __name__ == "__main__":
    main()









# contact1=Record("Andrii")
# contact2=Record("Igor")

# ad_book=AddressBook()
# ad_book.add_record(contact1)
# ad_book.add_record(contact2)
# print(ad_book)
# print("")

# contact2.add_phone("77777777778")
# contact1.add_phone("1234567980")
# contact1.add_phone("555555555567")
# contact1.add_phone("6666666666678")
# contact1.add_phone("8888888888678")
# contact1.add_phone("9999999999111")
# contact2.change_phone("7777777777","380989515265")

# print(ad_book)
# contact1.delete_phone("5555555555")

# print("")
# print("Adress Book:", ad_book)
# print("")
# print(contact1)
