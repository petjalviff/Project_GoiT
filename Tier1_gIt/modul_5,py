# jingle_bells = "Jingle bells, jingle bells\nJingle all the way\nOh, what fun it is to ride\nIn a one horse open sleigh"
# print(jingle_bells)



# s = "Hi there!"

# start = 6
# end = 7

# print(s.find("H")) # 5
# print(s.find("q"))  # -1


# s = "I am learning strings in Python. Some new. methods got now."
# print(s)
# sentences = s.split(". ")
# print(sentences)
# fgfh=s.upper()

# print(sentences[0]) # I am learning strings in Python
# print(sentences[1]) # Some new methods got now.
# print(sentences[2]) # Some new methods got now.
# print(fgfh)


# sentences = ["I am learning strings in Python", "Some new methods got now.", "Anymore"]
# text = ". 123. ".join(sentences)
# print(text) # I am learning strings in Python. Some new methods got now.
# print(sentences)

# map = {ord('з'): 'z', ord('ю'): 'u', ord('к'): 'k'}
# translated = 'zukkk'.translate(map)
# print(translated) # zu

# for i in range(45):
#     s = "int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}".format(i)
#     print(s)


# width = 5
# for num in range(12):
#     print('|{:^10} | {:^10} |{:^10}|{:^10}'.format(num, num**2, num**3, width))
#     print("-"*35)


# s =  "{name!r} {last_name!r}".format(last_name="Dilan", name="Bob")
# print(s)  # 'Bob' Dilan

# print('pi: {:0.3}'.format(35.1415568997563354))  # pi: 3.14

# import re

# s = "I am 252 years 45 old56"
# age = re.search('\d+', s)
# print(age)  # <re.Match object; span=(5, 7), match='25'>
# print(age.group())


# # s = "I bought 7 nuts for 6$ and 10 bolts for 3$."
# numbers = re.findall('\d+', s)
# print(numbers)  # ['7', '6', '10', '3']

# p = 'blue socks, White cap and red shoes'
# s=re.sub(r'(blue|white|red)', 'colour', p)
# print(s)    # colour socks and colour shoes



# *********************<<<<<<< Homework 1 >>>>>>>>>>****************
# -------> theory
# -----> Homework

# def real_len(text):
#     special_chars = ['\n', '\f', '\r', '\t', '\v']
#     count=0
#     for char in text:
#         if char not in special_chars:
#             count=count+1
#     return count


# text='Alex\nKdfe23\t\f\v.\r'
# print("довжина рядка без наступних керівних символів становить - ", real_len(text))


# *********************<<<<<<< Homework 2 >>>>>>>>>>****************
# -------> theory
# def sanitize_phone_number(phone_number):
#     # Прибираємо всі символи, крім цифр
#     sanitized_number = ''.join(char for char in phone_number if char.isdigit())
#     return sanitized_number

# # Приклад використання:
# phone_number = "+1 (555) 123-4567"
# sanitized_number = sanitize_phone_number(phone_number)
# print("Нормалізований номер телефону:", sanitized_number)


# i=4
# sentences = ["I am learning strings in Python", "wqewrwr"]
# text = ".23 ".join(sentences)
# text2=sentences.append(i)
# print(text) # I am learning strings in Python. Some new methods got now.
# print(sentences)


# -----> Homework

# def sanitize_phone_number(phone):
#     correct_number=[]
#     for i in phone:
#         print("i=",i)
#         print("correct_number =", correct_number)
#         if i.isdigit():
#             correct_number.append(i)
#             print("cor_numer after if = ", correct_number)
#     cor_numb=''.join(correct_number)
#     print(cor_numb)
#     return cor_numb
# print(sanitize_phone_number("    +38(050)123-32-34"))



# *********************<<<<<<< Homework 3 >>>>>>>>>>****************
# -------> theory
# -----> Homework
# def is_check_name(fullname, first_name):
#     check_name=fullname.startswith(first_name)
#     print(check_name)
#     return check_name


# fullname="Andrii Petryshyn"
# first_name="Andrii"
# secondname="Petryshyn"
# g=fullname.endswith(secondname)
# print(is_check_name(fullname, first_name))
# print(g)




# *********************<<<<<<< Homework 4 >>>>>>>>>>****************
# -------> theory
# -----> Homework
# def sanitize_phone_number(phone):
#     text=phone.strip()
#     # print(text)
#     text=text.replace("(","")
#     # print(text)
#     text=text.removeprefix("+")
#     # print(text)
#     text=text.replace(")","")
#     # print(text)
#     text=text.replace("-","")
#     text=text.replace(" ","")
#     # print(text)
#     return text


# def get_phone_numbers_for_countries(list_phones):
#     dict={
#         "UA":[],
#         "JP":[],
#         "TW":[],
#         "SG":[],
#     }
#     for i in list_phones:
#         b=sanitize_phone_number(i)
#         # print(b)
#         find_ua=b.find("380")
#         find_jp=b.find("81")
#         find_sg=b.find("65")
#         find_tw=b.find("886")
#         if find_ua==0:
#             dict["UA"].append(b)
#         elif find_jp==0:
#             dict["JP"].append(b)
#         elif find_tw==0:
#             dict["TW"].append(b)
#         elif find_sg==0:
#             dict["SG"].append(b)
#         else:
#             dict["UA"].append(b)    
#     print(dict)
#     return dict


# list=["    +81(050)123-32-34","     0503451234","(050)8889900","88650-111-22-22","65050 111 22 11   ","38050-111-22-22", ]

# get_phone_numbers_for_countries(list)


# *********************<<<<<<< Homework 5 >>>>>>>>>>****************
# -------> theory

# # -----> Homework --> код працює правильно, в автоперевірку потрібно давати весь перелік символів кирилиці і кацапські теж
# CYRILLIC_SYMBOLS = "абвгдежзийклмнопрстуфхцчшщьэюяєіїґ"
# TRANSLATION = ("a", "b", "v", "g", "d", "e", "j", "z", "y", "i", "k", "l", "m", "n", "o", "p", "r", "s", "t", "u",
#                "f", "h", "ts", "ch", "sh", "sch", "", "e", "yu", "ya", "je", "i", "ji", "g")

# # Створення кортежу з символів CYRILLIC_SYMBOLS
# CYRILLIC_SYMBOLSs = tuple(CYRILLIC_SYMBOLS)

# # TRANS = dict(zip(CYRILLIC_SYMBOLSs, TRANSLATION))
# TRANS = {}
# for cyrilic, latin in zip(CYRILLIC_SYMBOLS, TRANSLATION):
#     TRANS[ord(cyrilic)] = latin
#     TRANS[ord(cyrilic.upper())] = latin.upper()
    

# def translate(name):
#   return name.translate(TRANS)

# print(TRANS)
# print(translate('Андрій Петришин'))


# *********************<<<<<<< Homework 6 >>>>>>>>>>****************
# -------> theory
# def get_grade(key):
#     for a in my_dict_one:
#         if a==key:
#             print(my_dict_one[a])
#             return my_dict_one[a]

# def get_description(key):
#     for b in dict_zalik:
#         if b==key:
#             print(dict_zalik[b])
#             return dict_zalik[b]

# my_dict_one = {
#     "F":1,
#     "FX":2,
#     "E":3,
#     "D":3,
#     "C":4,
#     "B":5,
#     "A":5
#     }
# dict_zalik= {
#     "F": "Unsatisfactorily",
#     "FX": "Unsatisfactorily",
#     "E": "Enough",
#     "D": "Satisfactorily",
#     "C": "Good",
#     "B": "Very good",
#     "A": "Perfectly"
#     }

# print(my_dict_one)
# key="F"
# get_grade(key)
# get_description(key)
#****************************************

# BALL_CH=("A", "B", "C", "D", "E", "FX", "F")
# BALL_INT=(5,5,4,3,3,2,1)



# TRANS = list(zip(BALL_CH,BALL_INT))
# print(TRANS)

# for cyrilic, latin in zip(CYRILLIC_SYMBOLS, TRANSLATION):
#     TRANS[ord(cyrilic)] = latin
#     TRANS[ord(cyrilic.upper())] = latin.upper()


# for a in my_dict_one:
#     if a == key:
#         print(my_dict_one[a])

# get_grade(3)
# # print(my_dict_one.keys[0])


# -----> Homework
# grades = {"A": 5, "B": 5, "C": 4, "D": 3, "E": 3, "FX": 2, "F": 1}
# students = {"Nick": "A", "Olga": "B", "Mike": "FX", "Anna": "C", "Andrii":"A",}
# def get_grade(key):
#     for a in grades:
#         if a==key:
#             # print(grades[a])
#             return grades[a]

# def formatted_grades(students):
#     count=0
#     name_list=[]
#     for b in students:
#         count+=1
#         name=b
#         key=students[b]
#         ball=get_grade(key)
#         name_list.append('{:>4}|{:<10}|{:^5}|{:^5}'.format(count, name, key, ball))
#         # print(name_list)
#     return name_list
        
    
# for el in formatted_grades(students):
#     print(el)
#
#
# 
 #********************<<<<<<< Homework 7 >>>>>>>>>>****************
# -------> theory
# -----> Homework   


# def formatted_numbers():
#     result = []
#     result.append("|{:^10}|{:^10}|{:^10}|".format("decimal","hex","binary"))
#     # print("|{:<}|{:*^}|{:>}|".format("decimal", "hex", "binary"))
    
#     for el in range(16):
#         table = "|{0:<10d}|{0:^10x}|{0:>10b}|".format(el)
#         result.append(table)
#         # print(table)
#     return result

# for el in formatted_numbers():
#     print(el)


# *********************<<<<<<< Homework 8 >>>>>>>>>>****************
# -------> theory
# -----> Homework

# import re

# def find_word(text, word):
#     result = {}
#     search = re.search(r'\b' + re.escape(word) + r'\b', text)
#     if search:
#         result['result'] = True
#         result['first_index'] = search.start()
#         result['last_index'] = search.end()
#         result['search_string'] = word
#         result['string'] = text
#     else:
#         result['result'] = False
#         result['first_index'] = None
#         result['last_index'] = None
#         result['search_string'] = word
#         result['string'] = text
#     return result

# print(find_word(
#     "Guido van Rossum began working on Python in the late 1980s, as a successor to the ABC programming language, and first released it in 1991 as Python 0.9.0.",
#     "python"))


# *********************<<<<<<< Homework 9 >>>>>>>>>>****************
# -------> theory
# -----> Homework

# import re

# def find_all_words(text, word):
#     result = re.findall(r'\b' + re.escape(word) + r'\b', text, flags=re.IGNORECASE)
#     return result

# print(find_all_words(
#     "Guido van Rossum began working on Python in the late 1980s, as a successor to the ABC programming language, and first released it in 1991 as Python 0.9.0.",
#     "python"))



# *********************<<<<<<< Homework 10 >>>>>>>>>>****************
# -------> theory
# -----> Homework

# import re

# def replace_spam_words(text, spam_words):
#     for a in spam_words:
#         a_star=len(a)*"*"
#         text = re.sub(a, a_star, text, flags=re.IGNORECASE)
#     return text

# print(replace_spam_words(
#     "Guido van Rossum began working on Python in the late 1980s, as a successor to the ABC programming language, and first released it in 1991 as Python 0.9.0.",
#     ("python","late")))



# *********************<<<<<<< Homework 8 >>>>>>>>>>****************
# -------> theory
# -----> Homework


